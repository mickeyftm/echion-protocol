// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LotteryPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LotteryPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LotteryPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LotteryPool", id.toString(), this);
  }

  static load(id: string): LotteryPool | null {
    return store.get("LotteryPool", id) as LotteryPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get lotteryPoolType(): string {
    let value = this.get("lotteryPoolType");
    return value.toString();
  }

  set lotteryPoolType(value: string) {
    this.set("lotteryPoolType", Value.fromString(value));
  }

  get nftAddress(): Bytes | null {
    let value = this.get("nftAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("nftAddress");
    } else {
      this.set("nftAddress", Value.fromBytes(value as Bytes));
    }
  }

  get nftIndex(): BigInt | null {
    let value = this.get("nftIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("nftIndex");
    } else {
      this.set("nftIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get ticketPrice(): BigInt | null {
    let value = this.get("ticketPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("ticketPrice");
    } else {
      this.set("ticketPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get minAmount(): BigInt | null {
    let value = this.get("minAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("minAmount");
    } else {
      this.set("minAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get created(): BigInt | null {
    let value = this.get("created");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set created(value: BigInt | null) {
    if (value === null) {
      this.unset("created");
    } else {
      this.set("created", Value.fromBigInt(value as BigInt));
    }
  }

  get winner(): Bytes | null {
    let value = this.get("winner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set winner(value: Bytes | null) {
    if (value === null) {
      this.unset("winner");
    } else {
      this.set("winner", Value.fromBytes(value as Bytes));
    }
  }
}
